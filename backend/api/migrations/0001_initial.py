# Generated by Django 4.0.2 on 2022-02-13 13:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Имя проекта')),
                ('code', models.CharField(help_text='Является ключом в JSON файлах.', max_length=64, verbose_name='Код проекта')),
            ],
            options={
                'verbose_name': 'проект',
                'verbose_name_plural': 'проекты',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(max_length=128, verbose_name='UUID')),
                ('extension', models.CharField(max_length=4, verbose_name='Расширение файла')),
                ('state', models.CharField(choices=[('Unannotated', 'Не размечен'), ('Locked', 'Заблокирован'), ('Annotated', 'Размечен')], default='Unannotated', max_length=16, verbose_name='Статус')),
                ('lock_ts', models.BigIntegerField(default=0, editable=False)),
                ('assigned_user', models.ForeignKey(blank=True, db_column='user', help_text='Этот пользователь разметил изображение.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Присвоенный разметчик')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project', verbose_name='Проект')),
            ],
            options={
                'verbose_name': 'изображение',
                'verbose_name_plural': 'изображения',
            },
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Это название видят разетчики.', max_length=64, verbose_name='Название')),
                ('code', models.CharField(help_text='Является ключом в JSON файлах.', max_length=64, verbose_name='Кодовое имя')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('image', models.FileField(help_text='Должна быть квадратной, разрешение в пределах разумного.', upload_to='', verbose_name='Иллюстрация')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.project', verbose_name='Проект')),
            ],
            options={
                'verbose_name': 'классификация',
                'verbose_name_plural': 'классификации',
            },
        ),
        migrations.AddField(
            model_name='staff',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.project', verbose_name='Проект'),
        ),
        migrations.AddField(
            model_name='staff',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
